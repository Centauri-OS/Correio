#!/bin/sh

#==============================|Global variables
export pkgext='tpkg' #Package Extension

#==============================|Functions
CHECK_PKG(){
	#Receiving the package name.
	pkg_name="$@"
	#Checking the package extension. It must be tpkg.
	if ! echo "$pkg_name" | grep "\b${pkgext}\b$"; then
		printf '%s\n' "The format needs to be: ${pkgext}"
		return 1
	fi
	#Checking the package name for spaces.
	if echo "$pkg_name" | grep -qE  "[[:space:]]+"; then
		printf '%s\n' "Please do not use spaces in the package name."
		printf '%s\n' "Aborting the package creation."
		return 1
	fi
	#Checking how many traces there are.
	#The dash (-) is a delimiter, it must have 2.
	#format: packagename-version-build.tpkg
	verify=$(echo "${pkg_name}" | grep -o "-" wc -l)
	if ["$verify" -lt '2'] || ["$verify" -gt '2']; then
		printf '%s\n' "Error, the format of the package must be as follows:"\
		printf '%s\n' "PackageName-Version-Build.${pkgext}"
		return 1
	fi
} 

#==============================|Package Creation
CREATE_PKG(){
	#Receiving the package name.
	pkg_name="$1"
	if tar -cf ../${pkg_name} .;then
		printf '%s\n' "Package was created in ../${pkg_name}"
		return 0
	else
		printf '%s\n' "The package ${pkg_name} was not created..."
		exit 1
	fi
}
#==============================|Start
case "$1" in
	create|-c)
		#Downgrading to get package name.
		#No package name? then get out...
		shift
		if [-z "$1"]; then
			printf '%s\n' "You need to supply a package name."
			exit 1		
		fi
		CHECK_PKG "$@" || exit 1
		CREATE_PKG "$@" 
		#Calling the function to create the package.
	;;
esac
