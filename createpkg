#!/bin/sh

#==============================|Global variables
export version='1.0'
export pkgext='tpkg' #Package Extension

#Disabling unicode support
#for better performance
export LC_ALL=C
export LANG=C

#==============================|Functions
CHECK_PKG(){
	#Receiving the package name.
	pkg_name="$@"
	#Checking the package extension. It must be tpkg.
	if ! echo "$pkg_name" | grep "\b${pkgext}\b$"; then
		printf '%s\n' "The format needs to be: ${pkgext}"
		return 1
	fi
	#Checking the package name for spaces.
	if echo "$pkg_name" | grep -qE  "[[:space:]]+"; then
		printf '%s\n' "Please do not use spaces in the package name."
		printf '%s\n' "Aborting the package creation."
		return 1
	fi
	#Checking how many traces there are.
	#The dash (-) is a delimiter, it must have 2.
	#format: packagename-version-build.tpkg
	verify=$(echo "${pkg_name}" | grep -o "-" | wc -l)
	if [ "$verify" -lt '2' ] || [ "$verify" -gt '2' ]; then
		printf '%s\n' "Error, the format of the package must be as follows:"\
		printf '%s\n' "PackageName-Version-Build.${pkgext}"
		return 1
	fi
	
	return 0
} 

#==============================|Package Creation
CREATE_PKG(){
	#Receiving the package name.
	pkg_name="$1"
	
	if [ "VERBOSE" = '1' ]; then
		if tar -cvf ../${pkg_name} .; then
			printf '%s\n' "Package was created in ../${pkg_name}"
		else
			printf '%s\n' "The package ${pkg_name} was not created..."
			exit 1
		fi
	else 	        
        	if tar -cf ../${pkg_name} .;then
                	printf '%s\n' "Package was created in ../${pkg_name}"
                	return 0
       	 	else
                	printf '%s\n' "The package ${pkg_name} was not created..."
                	exit 1
        	fi
	fi
}
#==============================|USAGE
USAGE(){
	cat <<EOF
createpkg - OPTIONS
	
	create, -c
		Create a .tpkg package, 
		it needs to be in the main directory of the package to be generated, 
		it will be created one directory above.
	
	verbose, -v

AUTHOR: Emerson da Silva Vianna
CONTACT: centaurios@tutanota.com
EOF
}

#==============================|Parser
if [ -z "$1" ]; then
	USAGE
fi

while [ -n "$1" ]; do
	case "$1" in
		create|-c)
			CMD=$1
			shift
		;;
	
		verbose|-v)
			VERBOSE=1 # 0 OFF /  1 ON
			shift
		;;
	
		*.tpkg)
			PKG=$1
			shift
		;;
	
		*) 
			USAGE
			exit 1
		;;
	esac
done
#==============================|Start
case "$CMD" in
	create|-c)
		#No package name? then get out...
		if [ -z "$CMD" ]; then
			printf '%s\n' "You need to supply a package name."
			exit 1		
		fi
		CHECK_PKG "$PKG" || exit 1
		CREATE_PKG "$PKG" 
		#Calling the function to create the package.
	;;
esac

